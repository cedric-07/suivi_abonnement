using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using suivi_abonnement.Service.Interface;
using suivi_abonnement.Models;
using suivi_abonnement.Hubs;
using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.AspNetCore.Mvc.Filters;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace suivi_abonnement.Controllers
{

    
    public class MessageController : BaseController
    {
        private readonly IMessageService _messageService;
        private readonly IUserService _userService;
        private readonly INotificationService _notificationService;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IHubContext<MessageHub> _hubContext;
        public MessageController(
            IMessageService messageService, 
            IUserService userService, 
            IHttpContextAccessor httpContextAccessor, 
            INotificationService notificationService,
            IHubContext<MessageHub> hubContext): base(notificationService)
        {
            _messageService = messageService;
            _userService = userService;
            _notificationService = notificationService;
            _httpContextAccessor = httpContextAccessor;
            _hubContext = hubContext;
        }


        [HttpPost("upload")]
        public async Task<IActionResult> uploadFile([FromForm] IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                return BadRequest("Acun fichier s√©lectionn√©");
            }
            try
            {
                var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory() , "wwwroot/uploads/Folder");
                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                var filename = Guid.NewGuid().ToString() + Path.GetExtension(file.FileName);
                var filePath = Path.Combine(uploadsFolder, filename);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await file.CopyToAsync(stream);
                }

                var fileUrl = "/uploads/Folder/" + filename;
                return Ok(new { fileUrl });

            }
            catch (Exception ex)
            {
                
                throw new Exception("‚ùå Erreur lors de l'upload du fichier : " + ex.Message);
            }
        }
        [HttpGet]
        public IActionResult Index(int? receiverId)
        {
            try
            {
                int userId = _httpContextAccessor.HttpContext?.Session?.GetInt32("UserId") ?? 0;
                var userRole = _httpContextAccessor.HttpContext?.Session?.GetString("UserRole");

                if (userId == 0)
                {
                    return RedirectToAction("Login", "Account");
                }

                var users = _userService.GetAllUsers();
                var adminUser = _userService.GetAdmin();

                var messages = receiverId.HasValue 
                    ? _messageService.GetMessagesForConversation(userId, receiverId.Value) 
                    : new List<Message>();

                // if (receiverId.HasValue)
                // {
                //     _messageService.MarkMessagesAsRead(userId);
                // }

                var model = new MessageViewModel
                {
                    Users = users,
                    Messages = messages,
                    ReceiverId = receiverId,
                    CurrentUserId = userId
                };

                var viewmodel = new AbonnementViewModel
                {
                    MessageViewModel = new MessageViewModel
                    {
                        Users = adminUser,
                        Messages = messages,
                        ReceiverId = receiverId,
                        CurrentUserId = userId
                    }
                };

                return userRole == "admin" 
                    ? View("~/Views/AdminPage/MessagePage.cshtml", model) 
                    : View("~/Views/Home/InboxPage.cshtml", viewmodel);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erreur dans Index: {ex.Message}");
                TempData["Error"] = "Une erreur s'est produite lors du chargement des messages.";
                return RedirectToAction("Index");
            }
        }

       

        [HttpPost("Message/SendMessage")]
        public async Task<IActionResult> SendMessageToReceiver(int receiverId, string messageText, IFormFile file)
        {
            try
            {
                int senderId = _httpContextAccessor.HttpContext?.Session?.GetInt32("UserId") ?? 0;

                if (senderId == 0)
                {
                    Console.WriteLine("‚ùå Utilisateur non authentifi√©.");
                    return Unauthorized();
                }

                if (string.IsNullOrEmpty(messageText) && file == null)
                {
                    Console.WriteLine("‚ö†Ô∏è Message vide et aucun fichier joint.");
                    return BadRequest("Le message ne peut pas √™tre vide sans fichier.");
                }

                string? fileUrl = null;

                // üîπ 1. V√©rifier si un fichier est joint
                if (file != null && file.Length > 0)
                {
                    var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/uploads");
                    if (!Directory.Exists(uploadsFolder))
                    {
                        Directory.CreateDirectory(uploadsFolder);
                    }

                    var fileName = Guid.NewGuid().ToString() + Path.GetExtension(file.FileName);
                    var filePath = Path.Combine(uploadsFolder, fileName);

                    using (var stream = new FileStream(filePath, FileMode.Create))
                    {
                        await file.CopyToAsync(stream);
                    }

                    fileUrl = $"/uploads/{fileName}";
                }

                // üîπ 2. Convertir les liens dans le texte
                if (!string.IsNullOrEmpty(messageText))
                {
                    messageText = ConvertLinksToHtmlLinks(messageText);
                }

                Console.WriteLine($"üì© Message envoy√© de {senderId} √† {receiverId}: {messageText}, Fichier: {fileUrl}");

                // üîπ 3. Envoyer le message avec ou sans fichier
                _messageService.SendMessage(senderId, receiverId, messageText, fileUrl ?? string.Empty);

                // üîπ 4. Envoyer une notification via SignalR
                await _hubContext.Clients.User(receiverId.ToString())
                    .SendAsync("ReceiveMessage", senderId, messageText, fileUrl);

                await _hubContext.Clients.User(receiverId.ToString())
                    .SendAsync("NotifyNewMessage", senderId);

                return Ok(new { message = "Message envoy√© avec succ√®s", fileUrl });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erreur dans SendMessage: {ex.Message}");
                return StatusCode(500, "Erreur serveur");
            }
        }




        private string ConvertLinksToHtmlLinks(string messageText)
        {
            string pattern = @"(https?://[^\s]+)";
            string replacement = @"<a href=""$1"" target=""_blank"">$1</a>";
            return Regex.Replace(messageText, pattern, replacement);
        }

        [HttpGet("Message/searchUser")]
        public IActionResult searchUser(string name)
        {
            var userRole = _httpContextAccessor.HttpContext?.Session?.GetString("UserRole");
            try
            {
                var user = _messageService.searchUser(name);
                if (user != null && user.Id > 0)
                {
                    var model = new MessageViewModel
                    {
                        ReceiverId = user.Id,
                        Users = new List<User> { user }
                    };

                    return userRole == "admin" 
                        ? View("~/Views/AdminPage/MessagePage.cshtml", model) 
                        : View("~/Views/Home/InboxPage.cshtml", model);
                }
                else
                {
                    TempData["Error"] = "Aucun utilisateur trouv√© avec ce nom.";
                    return userRole == "admin" 
                        ? View("~/Views/AdminPage/MessagePage.cshtml") 
                        : View("~/Views/Home/InboxPage.cshtml");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Erreur lors de la recherche de l'utilisateur : " + ex.Message);
                return userRole == "admin" 
                    ? View("~/Views/AdminPage/MessagePage.cshtml") 
                    : View("~/Views/Home/InboxPage.cshtml");
            }
        }

        [HttpGet("Message/GetUnreadMessagesCount")]
        public JsonResult GetUnreadMessagesCount()
        {
            try
            {
                int userId = _httpContextAccessor.HttpContext?.Session?.GetInt32("UserId") ?? 0;
                if (userId == 0)
                    return Json(new { count = 0 });

                int count = _messageService.CountMessagesisRead(userId);
                return Json(new { count });
            }
            catch (Exception ex)
            {
                Console.WriteLine("Erreur lors du comptage des messages non lus : " + ex.Message);
                return Json(new { count = 0, error = ex.Message });
            }
        }

        // [HttpPost("Message/MarkMessagesAsRead")]
        // public JsonResult MarkMessagesAsRead()
        // {
        //     try
        //     {
        //         int userId = _httpContextAccessor.HttpContext.Session.GetInt32("UserId") ?? 0;
        //         if (userId == 0)
        //             return Json(new { success = false });

        //         _messageService.MarkMessagesAsRead(userId);
        //         return Json(new { success = true });
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine("Erreur lors du marquage des messages comme lus : " + ex.Message);
        //         return Json(new { success = false });
        //     }
        // }

        [HttpGet]
        public IActionResult GetMessages(int receiverId)
        {
            int userId = _httpContextAccessor.HttpContext?.Session?.GetInt32("UserId") ?? 0;
            try
            {
                var messages = _messageService.GetMessagesForConversation(userId, receiverId);
                return Json(messages);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Erreur lors du chargement des messages : " + ex.Message);
                return Json(new { error = ex.Message });
            }
        }



    }
}
