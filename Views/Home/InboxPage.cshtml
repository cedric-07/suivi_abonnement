@{
    ViewData["Title"] = "Acceuil";
    Layout = "~/Views/Shared/LayoutClient/_LayoutClient.cshtml";
}
<!-- Bootstrap Bundle avec Popper.js -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<style>
        body {
            background-color: #f0f2f5;
        }
        .chat-container {
            height: 85vh;
            display: flex;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0px 4px 10px rgba(0,0,0,0.1);
        }
        .chat-list {
            width: 30%;
            background: white;
        }
        .chat-box {
            width: 70%;
            display: flex;
            flex-direction: column;
            background: #e5ddd5;
        }
        .chat-header {
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: darkblue;

        }
        .message-container {
            display: flex;
            align-items: flex-end;
            margin-bottom: 10px;
        }

        .message-container.sent {
            justify-content: flex-end;
        }

        .message-container.received {
            justify-content: flex-start;
        }
        .avatar i {
            font-size: 30px;
            color: #6c757d;
        }
        .message-list {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            color: darkblue;
        }
        .message-input {
            padding: 10px;
            background: white;
            border-top: 1px solid #ddd;
        }
        .message {
            max-width: 70%;
            padding: 10px;
            border-radius: 15px;
            position: relative;
            font-size: 14px;
        }
        .message.sent {
            background-color: #dcf8c6;
            text-align: right;
            border-bottom-right-radius: 0;
            margin-right: 10px;
        }

        .message.received {
            background-color: #fff;
            border-bottom-left-radius: 0;
            margin-left: 10px;
            width: auto;
            word-wrap: break-word;
            }

        .message-date {
            display: block;
            font-size: 12px;
            color: #888;
            margin-top: 5px;
        }

        .message-status {
            font-size: 12px;
            color: #34b7f1;
            margin-left: 5px;
        }
        .list-group-item {
            cursor: pointer;
            border: none;
        }
        .message-row {
            align-items: center;
            margin-bottom: 10px;
            height: auto;
            width: 30%;
            border-radius: 15px;
        }

        .badge {
            font-size: 0.8rem;
            border-radius: 50%;
            padding: 5px 8px;
            margin-left: auto;
            margin-right: 10px;
        }
        .title {
            font-weight: bold;
            font-size: 0.8em;
            color: #0d2d5a;
            letter-spacing: 1px;
        }

        .message-image {
            max-width: 200px;
            border-radius: 8px;
            display: block;
            margin: 5px 0;
        }

        .message-file {
            display: flex;
            align-items: center;
            background: #f0f0f0;
            padding: 8px;
            border-radius: 5px;
            text-decoration: none;
            color: #333;
        }

            .message-file i {
                font-size: 20px;
                margin-right: 5px;
            }


        /* üìé Style du bouton d‚Äôattachement */
        .attach-btn {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
        }

            .attach-btn:hover {
                color: #60ee13;
            }
         .send-btn {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #41b70a;
        }

        /* üìÇ Pr√©visualisation du fichier s√©lectionn√© */
        .file-preview-container {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #ddd;
        }

        .preview-image {
            max-width: 100px;
            max-height: 100px;
            border-radius: 8px;
        }

        .file-name {
            font-size: 14px;
            color: #007bff;
            font-weight: normal;
        }

        /* ‚ùå Bouton d'annulation */
        #removeFile {
            font-size: 12px;
            padding: 4px 8px;
        }

        .file-container {
            display: flex;
            align-items: center;
            gap: 10px;
            background: #f8f9fa;
            padding: 10px;
            border-radius: 8px;
            max-width: 250px;
        }

        .file-icon i {
            font-size: 3em; /* Ic√¥ne grande */
            color: #6c757d;
        }

        .file-info {
            display: flex;
            flex-direction: column;
        }

        .file-name {
            font-size: 12px;
            color: #007bff;
            text-decoration: none;
            font-weight: bold;
        }

        .file-name:hover {
            text-decoration: underline;
        }

        .download-button {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
            font-size: 10px;
            padding: 5px 10px;
             background: #08056c;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 5px;
            font-weight: bold;
        }

        .download-button i {
            font-size: 16px;
        }

        .download-button:hover {
            background: #0056b3;
        }

        .image-container {
            position: relative;
            display: inline-block;
        }

        .message-image {
            width: 200px; /* Taille ajustable */
            height: auto;
            border-radius: 8px;
            transition: filter 0.3s ease-in-out;
        }

        .blurred {
            filter: blur(10px); /* Flou avant t√©l√©chargement */
        }

        .download-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.6);
            color: white;
            padding: 10px;
            border-radius: 50%;
            font-size: 24px;
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
        }

        .download-overlay:hover {
            background: rgba(0, 0, 0, 0.8);
        }

        /* Supprimer le blur apr√®s t√©l√©chargement */
        .image-container a:active + .message-image,
        .image-container a:focus + .message-image {
            filter: none;
        }
        .pdf {
            color: #840741;
        }
    </style>

<body class="index-page">
    <main class="main">
        <!-- Page Title -->
        <div class="page-title">
            <div class="heading">
                <div class="container">
                    <div class="row d-flex justify-content-center text-center">
                        <div class="col-lg-8">
                            <h1>Discussion et r√©clamation</h1>
                            <p>Discuterez et laissez-nous votre avis.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div><!-- End Page Title -->
        <!-- Contact Section -->
        <section id="blog-posts" class="blog-posts section">
            <div class="container">
                <div class="chat-container">
                    <div class="chat-list p-3">
                        <h5 class="mb-3">Conversations</h5>
                        
                        <ul class="list-group" id="userList">
                            @if (Model?.MessageViewModel?.Users != null)
                            {
                                @foreach (var user in Model.MessageViewModel.Users)
                                {
                                    <li class="list-group-item d-flex align-items-center" onclick="selectUser(@user.Id, '@user.Username')">
                                        <div class="me-3">
                                            <i class="fas fa-user-circle fa-2x"></i>
                                        </div>
                                        <span>@user.Username</span>
                                        <span class="user-status @(user.IsConnected ? "online" : "offline")"></span>
                                        <span id="notif-@user.Id" class="badge bg-danger ms-auto d-none">0</span>
                                    </li>
                                }
                            }
                        </ul>


                    </div>
                    <div class="chat-box">
                        <div class="chat-header">
                            <h5 id="chatTitle">S√©lectionnez un utilisateur</h5>
                        </div>
                        <div id="chatWindow" class="message-list">
                            @if (Model?.MessageViewModel?.Messages != null)
                            {
                                @foreach (var message in Model.MessageViewModel.Messages)
                                {
                                    if (message.SenderId == Model.MessageViewModel.CurrentUserId)
                                    {
                                        <div class="message-row sent">
                                            <div class="avatar-sender">
                                                <i class="fas fa-user-circle user-icon"></i>
                                            </div>
                                            <div class="sent">
                                                <p>@message.MessageText</p>
                                                <span class="message-date">@message.DateEnvoi</span>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="message-row received">
                                            <div class="avatar-receiver">
                                                <i class="fas fa-user-circle user-icon"></i>
                                            </div>
                                            <div class="message received">
                                                <p>@message.MessageText</p>
                                                <span class="message-date">@message.DateEnvoi</span>
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        </div>
                        <div class="message-input d-flex align-items-center">
                            <input type="hidden" id="receiverId" value="@Model?.MessageViewModel?.ReceiverId">

                            <!-- Bouton d'attachement -->
                            <button id="attachButton" class=" attach-btn me-2">
                                <i class="fas fa-paperclip"></i>
                            </button>

                            <!-- Champ de s√©lection de fichier cach√© -->
                            <input type="file" id="fileInput" accept=".jpg,.jpeg,.png,.gif,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx" style="display: none;">

                            <!-- Zone de texte pour le message -->
                            <textarea id="messageText" class="form-control me-2" placeholder="√âcrivez un message..."></textarea>

                            <!-- Bouton d'envoi -->
                            <button id="sendButton" class="send-btn ">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>

                        <!-- Zone de pr√©visualisation du fichier avant envoi -->
                        <div id="filePreviewContainer" class="file-preview-container" style="display: none;">
                            <div id="filePreview"></div>
                            <button id="removeFile" class="btn btn-danger btn-sm">‚ùå Annuler</button>
                        </div>
                    </div>
                </div>
            </div>              
        </section><!-- /Blog Posts Section -->

    </main><!-- End #main -->
    <!-- Scroll Top -->
    <a href="#" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>

    <!-- Preloader -->
    <!-- Vendor JS Files -->
    <script src="../assetsUser/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="../assetsUser/vendor/php-email-form/validate.js"></script>
    <script src="../assetsUser/vendor/aos/aos.js"></script>
    <script src="../assetsUser/vendor/glightbox/js/glightbox.min.js"></script>
    <script src="../assetsUser/vendor/swiper/swiper-bundle.min.js"></script>
    <script src="../assetsUser/vendor/purecounter/purecounter_vanilla.js"></script>
    <script src="../assetsUser/vendor/imagesloaded/imagesloaded.pkgd.min.js"></script>
    <script src="../assetsUser/vendor/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.20/signalr.min.js"></script>
    <script>
    var userId = '@(Context.Session.GetInt32("UserId"))';
            var connection = new signalR.HubConnectionBuilder()
            .withUrl("/messageHub")
            .build();

    // üöÄ Connexion SignalR avec reconnexion automatique
    function startConnection() {
        connection.start().then(() => {
            console.log("‚úÖ SignalR connect√© !");
            restoreUnreadNotifications();
        }).catch(err => {
            console.error("‚ùå Erreur de connexion SignalR :", err);
            setTimeout(startConnection, 5000);
        });
    }

    startConnection();

    connection.onreconnecting(() => console.warn("‚ö†Ô∏è SignalR tente de se reconnecter..."));
    connection.onreconnected(() => {
        console.log("‚úÖ SignalR reconnect√© !");
        restoreUnreadNotifications();
    });
    connection.onclose(() => {
        console.error("‚ùå SignalR d√©connect√©, tentative de reconnexion...");
        setTimeout(startConnection, 5000);
    });



    // üì© Fonction d'envoi de message
        $(document).ready(function () {
            $("#attachButton").click(function () {
                $("#fileInput").click();
            });

            $("#fileInput").change(function () {
                var file = this.files[0];

                if (file) {
                    var fileName = file.name;
                    var fileExtension = fileName.split('.').pop().toLowerCase();

                    if (["jpg", "jpeg", "png", "gif"].includes(fileExtension)) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $("#filePreview").html(`<img src="${e.target.result}" class="preview-image">`);
                        };
                        reader.readAsDataURL(file);
                    } else {
                        $("#filePreview").html(`<p class="file-name"><i class="fas fa-file-alt"></i> ${fileName}</p>`);
                    }

                    $("#filePreviewContainer").show();
                }
            });

            $("#removeFile").click(function () {
                $("#fileInput").val("");
                $("#filePreviewContainer").hide();
                $("#filePreview").html("");
            });

            $("#sendButton").click(async function () {
                var receiverId = $("#receiverId").val();
                var fileInput = $("#fileInput")[0];
                var file = fileInput.files.length > 0 ? fileInput.files[0] : null;
                var message = $("#messageText").val().trim();

                if (!receiverId || (!file && message === "")) {
                    console.warn("‚ö†Ô∏è Impossible d'envoyer : aucun fichier ni message.");
                    return;
                }

                let filePath = null;

                // üîÑ Upload du fichier si pr√©sent
                if (file) {
                    let formData = new FormData();
                    formData.append("file", file);

                    try {
                        let uploadUrl = "/Message/UploadFile";
                        console.log("üì° Tentative d'upload vers :", uploadUrl);

                        let response = await fetch(uploadUrl, {
                            method: "POST",
                            body: formData
                        });

                        if (!response.ok) {
                            throw new Error(`Erreur HTTP ${response.status} - ${response.statusText}`);
                        }

                        let result = await response.json();
                        filePath = result.filePath;

                        if (filePath) {
                            filePath = filePath.startsWith("/uploads/") ? filePath : `/uploads/${filePath.split('/').pop()}`;
                        }

                        console.log("‚úÖ Fichier upload√© avec succ√®s :", filePath);
                    } catch (error) {
                        console.error("‚ùå Erreur d'upload :", error);
                        alert("Erreur lors de l'upload du fichier. V√©rifiez la console.");
                    }
                }

                // üî• Envoi du message via SignalR
                connection.invoke("SendMessageToReceiver", parseInt(receiverId), message, filePath)
                    .then(() => {
                        console.log("‚úÖ Message/Fichier envoy√© via SignalR.");
                        $("#messageText").val("");
                        $("#fileInput").val("");
                        $("#filePreviewContainer").hide();
                        $("#filePreview").html("");

                        var messageDate = new Date();
                        var dateDisplay = formatDate(messageDate);

                        // üî• Construire messageContent avec texte + fichier
                        let messageContent = "";

                        if (message) {
                            messageContent += `<p class="message-text">${convertLinksToHtml(message)}</p>`;
                        }

                        if (filePath) {
                            if (/\.(jpg|jpeg|png|gif)$/i.test(filePath)) {
                                messageContent += `
                                <div class="image-container">
                                    <img src="${filePath}" class="message-image blurred" alt="Image envoy√©e" />
                                    <a href="${filePath}" download class="download-overlay">
                                        <i class="fas fa-download"></i>
                                    </a>
                                </div>
                            `;
                            } else {
                                let fileName = file.name;
                                messageContent += `
                                    <div class="file-container">
                                        <div class="file-icon">
                                            <i class="pdf fas fa-file-pdf"></i>
                                        </div>
                                        <div class="file-info">
                                            <a href="${filePath}" target="_blank" class="file-name text-muted">${fileName}</a>
                                            <a href="${filePath}" download class="download-button">
                                                <i class="fas fa-download"></i> T√©l√©charger
                                            </a>
                                        </div>
                                    </div>
                                `;

                            }
                        }

                        // üì® Affichage du message dans le chat
                        $("#chatWindow").append(`
                            <div class="message-container sent">
                                <div class="message sent">
                                    ${messageContent}
                                    <span class="message-date">${dateDisplay}</span>
                                    <span class="message-status">‚úì Envoy√©</span>
                                </div>
                                <div class="avatar"><i class="bi bi-person-circle user-icon"></i></div>
                            </div>
                        `);

                        scrollToBottom();
                    })
                    .catch(err => console.error("‚ùå Erreur d'envoi via SignalR :", err));
            });

        });





        function convertLinksToHtml(message) {
            let urlPattern = /(https?:\/\/[^\s]+)/g;
            return message.replace(urlPattern, function(url) {
                return `<a href="${url}" target="_blank">${url}</a>`;
            });
        }



    // üì¨ Notification de nouveau message
    connection.on("NotifyNewMessage", function (senderId) {
        console.log("üì¨ Nouveau message de :", senderId);

        var currentReceiverId = $("#receiverId").val();
        if (parseInt(currentReceiverId) !== senderId) {
            console.log("‚ö†Ô∏è Affichage d'une notification");

            var notifBadge = $("#notif-" + senderId);
            if (notifBadge.length > 0) {
                var currentCount = parseInt(notifBadge.text()) || 0;
                var newCount = currentCount + 1;
                if(newCount > 0){
                    notifBadge.text(newCount).removeClass("d-none");
                }
                else{
                    notifBadge.text(newCount).addClass("d-none");
                }
                saveUnreadNotification(senderId, currentCount + 1);
            } else {
                console.warn("‚ö†Ô∏è Badge non trouv√© pour l'utilisateur " + senderId);
            }
        }
    });

    // üì© R√©ception d'un message
     connection.on("ReceiveMessage", function (data) {
            console.log("üì© Message/Fichier re√ßu de :", data.senderId);

            var currentReceiverId = $("#receiverId").val();
            var messageDate = new Date();
            var dateDisplay = formatDate(messageDate);
            let messageStatus = "‚úì‚úì"; // Statut initial avant lecture

            // üîó Correction de l'URL du fichier
            let fileUrl = data.filePath ? (data.filePath.startsWith("/uploads/") ? data.filePath : `/uploads/${data.filePath.split('/').pop()}`) : null;

            let messageContent = "";

            // üí¨ Ajouter le texte du message s'il existe
            if (data.message) {
                messageContent += `<p class="message-text">${convertLinksToHtml(data.message)}</p>`;
            }

            // üìÇ V√©rifier si un fichier est attach√©
            if (data.filePath) {
                let fileUrl = `/uploads/${data.filePath.split('/').pop()}`;

                // üì∑ Image
                if (/\.(jpg|jpeg|png|gif|bmp)$/i.test(data.filePath)) {
                   messageContent += `
                    <div class="image-container">
                        <img src="${fileUrl}" class="message-image blurred" alt="Image re√ßue" />
                        <a href="${fileUrl}" download class="download-overlay">
                            <i class="fas fa-download"></i>
                        </a>
                    </div>
                `;
                }
                // üìÑ Document
                else if (/\.(pdf|doc|docx|xls|xlsx|ppt|pptx|txt)$/i.test(data.filePath)) {
                    let fileName = data.filePath.split('/').pop();
                    messageContent += `
                        <div class="file-container">
                            <div class="file-icon">
                                <i class="pdf fas fa-file-pdf"></i>
                            </div>
                            <div class="file-info">
                                <a href="${fileUrl}" target="_blank" class="file-name text-muted">${fileName}</a>
                                <a href="${fileUrl}" download class="download-button">
                                    <i class="fas fa-download"></i> T√©l√©charger
                                </a>
                            </div>
                        </div>
                    `;

                }

                // üé• Vid√©o
                else if (/\.(mp4|webm|ogg)$/i.test(data.filePath)) {
                    messageContent += `<video controls class="message-video">
                        <source src="${fileUrl}" type="video/mp4">
                        Votre navigateur ne supporte pas la lecture des vid√©os.
                    </video>`;
                }
                // üîä Audio
                else if (/\.(mp3|wav)$/i.test(data.filePath)) {
                    messageContent += `<audio controls class="message-audio">
                        <source src="${fileUrl}" type="audio/mpeg">
                        Votre navigateur ne supporte pas la lecture audio.
                    </audio>`;
                }
                // üìÇ Autres fichiers
                else {
                    let fileName = data.filePath.split('/').pop();
                    messageContent += `<a href="${fileUrl}" target="_blank">${fileName}</a>`;
                }
            }


            if (parseInt(currentReceiverId) === data.senderId) {
                console.log("‚úÖ Affichage du message en temps r√©el");

                $("#chatWindow").append(`
                    <div class="message-container received">
                        <div class="avatar"><i class="bi bi-person-circle user-icon"></i></div>
                        <div class="message received">
                            ${messageContent}
                            <span class="message-date">${dateDisplay}</span>
                            <span class="message-status">${messageStatus}</span>
                        </div>
                    </div>
               `);
               scrollToBottom();

                // üî• Marquer comme lu d√®s r√©ception du message
               connection.invoke("MarkMessagesAsRead", parseInt(data.senderId), parseInt(userId))
               .then(() => console.log("‚úÖ Messages marqu√©s comme lus pour", data.senderId))
               .catch(err => console.error("‚ùå Erreur lors du marquage comme lu :", err));
            } else {
            console.warn("‚ö†Ô∏è Message re√ßu mais la conversation n'est pas ouverte !");

            var notifBadge = $("#notif-" + data.senderId);
            if (notifBadge.length > 0) {
               var currentCount = parseInt(notifBadge.text()) || 0;
               notifBadge.text(currentCount + 1).removeClass("d-none");
               saveUnreadNotification(data.senderId, currentCount + 1);
            } else {
               console.warn("‚ö†Ô∏è Badge non trouv√© pour l'utilisateur " + data.senderId);
            }   
        }
     });

    // üì© Mettre √† jour les ‚úì‚úì Vu pour l'exp√©diteur
    connection.on("MessageRead", function (receiverId) {
        console.log("‚úÖ Messages marqu√©s comme lus par :", receiverId);
        $(".message-row.sent .message-status").text("‚úì‚úì Vu");
    });

    // üî• Sauvegarde des notifications non lues
    function saveUnreadNotification(userId, count) {
        var unreadNotifications = JSON.parse(localStorage.getItem("unreadNotifications")) || {};
        unreadNotifications[userId] = count;
        localStorage.setItem("unreadNotifications", JSON.stringify(unreadNotifications));
    }

    // üîÑ Restauration des notifications non lues apr√®s rechargement
    function restoreUnreadNotifications() {
        var unreadNotifications = JSON.parse(localStorage.getItem("unreadNotifications")) || {};
        for (var userId in unreadNotifications) {
            var notifBadge = $("#notif-" + userId);
            var count = unreadNotifications[userId];

            if (notifBadge.length > 0) {
                if (count > 0) {
                    notifBadge.text(count).removeClass("d-none");
                } else {
                    notifBadge.addClass("d-none");
                }
            }
        }
    }


    // üéØ S√©lection d'un utilisateur
    function selectUser(receiverId, receiverName) {
    console.log("üîÑ Ouverture de la conversation avec :", receiverId);

    $("#receiverId").val(receiverId);
    $("#chatTitle").text("Discussion avec " + receiverName);
    $("#chatWindow").empty();

    var notifBadge = $("#notif-" + receiverId);
    if (notifBadge.length > 0 && !notifBadge.hasClass("d-none")) {
        notifBadge.text("0").addClass("d-none");
        saveUnreadNotification(receiverId, 0);
    }


    connection.invoke("MarkMessagesAsRead", parseInt(receiverId), parseInt(userId))
        .then(() => console.log("‚úÖ Messages marqu√©s comme lus pour", receiverId))
        .catch(err => console.error("‚ùå Erreur lors du marquage comme lu :", err));

    // Charger les anciens messages via AJAX
        $.ajax({
            url: "/Message/GetMessages",
            type: "GET",
            data: { receiverId: receiverId },
            success: function (messages) {
                messages.forEach(msg => {
                    let isSent = msg.senderId === parseInt(userId);
                    let messageClass = isSent ? "sent" : "received";
                    let messageDate = new Date(msg.dateEnvoi);
                    let dateDisplay = formatDate(messageDate);
                    let messageStatus = msg.isSeen ? "‚úì‚úì Vu" : "‚úì‚úì";

                    let messageContent = "";

                    // V√©rifier s'il y a du texte
                    if (msg.messageText) {
                        messageContent += `<p class="message-text">${convertLinksToHtml(msg.messageText)}</p>`;
                    }

                    // V√©rifier s'il y a un fichier
                    if (msg.filePath) {
                        let fileUrl = `/uploads/${msg.filePath.split('/').pop()}`;
                        
                        if (/\.(jpg|jpeg|png|gif|bmp)$/i.test(msg.filePath)) {
                            messageContent += `
                            <div class="image-container">
                                <img src="${fileUrl}" class="message-image blurred" alt="Image envoy√©e" />
                                <a href="${fileUrl}" download class="download-overlay" onclick="removeBlur(this)">
                                    <i class="fas fa-download"></i>
                                </a>
                            </div>
                        `;
                        } else if (/\.(pdf|doc|docx|xls|xlsx|ppt|pptx|txt)$/i.test(msg.filePath))
                         {
                            let fileName = msg.filePath.split('/').pop();
                            messageContent += `
                                <div class="file-container">
                                    <div class="file-icon">
                                        <i class="pdf fas fa-file-pdf"></i>
                                    </div>
                                    <div class="file-info">
                                        <a href="${fileUrl}" target="_blank" class="file-name text-muted">${fileName}</a>
                                        <a href="${fileUrl}" download class="download-button">
                                            <i class="fas fa-download"></i> T√©l√©charger
                                        </a>
                                    </div>
                                </div>
                            `;


                        } else if (/\.(mp4|webm|ogg)$/i.test(msg.filePath)) {
                            messageContent += `<video controls class="message-video">
                                <source src="${fileUrl}" type="video/mp4">
                                Votre navigateur ne supporte pas la lecture des vid√©os.
                            </video>`;
                        } else if (/\.(mp3|wav)$/i.test(msg.filePath)) {
                            messageContent += `<audio controls class="message-audio">
                                <source src="${fileUrl}" type="audio/mpeg">
                                Votre navigateur ne supporte pas la lecture audio.
                            </audio>`;
                        } else {
                            let fileName = msg.filePath.split('/').pop();
                            messageContent += `<a href="${fileUrl}" target="_blank">${fileName}</a>`;
                        }
                    }
                    


                    $("#chatWindow").append(`
                        <div class="message-container ${messageClass}">
                            ${isSent ? "" : `<div class="avatar"><i class="bi bi-person-circle user-icon"></i></div>`}
                            <div class="message ${messageClass}">
                                ${messageContent}
                                <span class="message-date">${dateDisplay}</span>
                                <span class="message-status">${messageStatus}</span>
                            </div>
                            ${isSent ? `<div class="avatar"><i class="bi bi-person-circle user-icon"></i></div>` : ""}
                        </div>
                    `);
                });

                scrollToBottom();
            },
            error: function (err) {
                console.error("‚ùå Erreur chargement messages :", err);
            }
        });


}
    function removeBlur(element) {
        let image = element.previousElementSibling;
        image.classList.remove("blurred");
    }



    function scrollToBottom() {
        $("#chatWindow").scrollTop($("#chatWindow").prop("scrollHeight"));
    }

    function formatDate(date) {
        return date.toLocaleTimeString("fr-FR", { hour: "2-digit", minute: "2-digit" });
    }
</script>

    <!-- Main JS File -->
    <script src="../assetsUser/js/main.js"></script>
    <style>
        .page-title {
            background: linear-gradient(to left, #0d2d5a, #d4d5dd) !important;
            color: #fff;
            padding: 50px 0;
        }
    </style>
</body>



</html>