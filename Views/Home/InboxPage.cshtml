@model suivi_abonnement.Models.AbonnementViewModel

@{
    ViewData["Title"] = "Liste des Abonnements";
    Layout = "~/Views/Shared/LayoutClient/_LayoutClient.cshtml";
}

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bo√Æte de Messages</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-color: #f0f2f5;
            padding-top: 10%;
        }
        .chat-container {
            height: 85vh;
            display: flex;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0px 4px 10px rgba(0,0,0,0.1);
        }
        .chat-list {
            width: 30%;
            background: white;
        }
        .chat-box {
            width: 70%;
            display: flex;
            flex-direction: column;
            background: #e5ddd5;
        }
        .chat-header {
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: darkblue;

        }
        .message-container {
            display: flex;
            align-items: flex-end;
            margin-bottom: 10px;
        }

        .message-container.sent {
            justify-content: flex-end;
        }

        .message-container.received {
            justify-content: flex-start;
        }
        .avatar i {
            font-size: 30px;
            color: #6c757d;
        }
        .message-list {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            color: darkblue;
        }
        .message-input {
            padding: 10px;
            background: white;
            border-top: 1px solid #ddd;
        }
        .message {
            max-width: 70%;
            padding: 10px;
            border-radius: 15px;
            position: relative;
            font-size: 14px;
        }
        .message.sent {
            background-color: #dcf8c6;
            text-align: right;
            border-bottom-right-radius: 0;
            margin-right: 10px;
        }

        .message.received {
            background-color: #fff;
            border-bottom-left-radius: 0;
                margin-left: 10px;
            }

        .message-date {
            display: block;
            font-size: 12px;
            color: #888;
            margin-top: 5px;
        }

        .message-status {
            font-size: 12px;
            color: #34b7f1;
            margin-left: 5px;
        }
        .list-group-item {
            cursor: pointer;
            border: none;
        }
        .message-row {
            align-items: center;
            margin-bottom: 10px;
            height: auto;
            width: 30%;
            border-radius: 15px;
        }

        .badge {
            font-size: 0.8rem;
            border-radius: 50%;
            padding: 5px 8px;
            margin-left: auto;
            margin-right: 10px;
        }
        .title {
            font-weight: bold;
            font-size: 0.8em;
            color: #0d2d5a;
            letter-spacing: 1px;
        }
        
    </style>
</head>
<body>
    <div class="container">
        <div class="chat-container">
            <div class="chat-list p-3">
                <h5 class="mb-3">Conversations</h5>
                <form class="mb-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-search"></i></span>
                        <input type="text" class="form-control" placeholder="Rechercher...">
                    </div>
                </form>
                <ul class="list-group" id="userList">
                    @foreach (var user in Model?.MessageViewModel.Users)
                    {
                        <li class="list-group-item d-flex align-items-center" onclick="selectUser(@user.Id, '@user.Username')">
                            <div class="me-3">
                                <i class="fas fa-user-circle fa-2x"></i>
                            </div>
                            <span>@user.Username</span>
                            <span class="user-status @(user.IsConnected ? "online" : "offline")"></span>
                            <span id="notif-@user.Id" class="badge bg-danger ms-auto d-none">0</span>
                        </li>
                    }
                </ul>


            </div>
            <div class="chat-box">
                <div class="chat-header">
                    <h5 id="chatTitle">S√©lectionnez un utilisateur</h5>
                </div>
                <div id="chatWindow" class="message-list">
                    @foreach (var message in Model.MessageViewModel.Messages)
                    {
                        if (message.SenderId == Model.MessageViewModel.CurrentUserId)
                        {
                            <div class="message-row sent">
                                <div class="avatar-sender">
                                    <i class="fas fa-user-circle user-icon"></i>
                                </div>
                                <div class="sent">
                                    <p>@message.MessageText</p>
                                    <span class="message-date">@message.DateEnvoi</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="message-row received">
                                <div class="avatar-receiver">
                                    <i class="fas fa-user-circle user-icon"></i>
                                </div>
                                <div class="message received">
                                    <p>@message.MessageText</p>
                                    <span class="message-date">@message.DateEnvoi</span>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="message-input d-flex">
                    <input type="hidden" id="receiverId" value="@Model.MessageViewModel.ReceiverId">
                    <textarea  id="messageText" class="form-control me-2" placeholder="√âcrivez un message..."></textarea>
                    <button id="sendButton" class="btn btn-primary"><i class="fas fa-paper-plane"></i></button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.20/signalr.min.js"></script>
    <script>
    var userId = '@(Context.Session.GetInt32("UserId"))';
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/messageHub")
        .withAutomaticReconnect()
        .build();

    // üöÄ Connexion SignalR avec reconnexion automatique
    function startConnection() {
        connection.start().then(() => {
            console.log("‚úÖ SignalR connect√© !");
            restoreUnreadNotifications();
        }).catch(err => {
            console.error("‚ùå Erreur de connexion SignalR :", err);
            setTimeout(startConnection, 5000);
        });
    }

    startConnection();

    connection.onreconnecting(() => console.warn("‚ö†Ô∏è SignalR tente de se reconnecter..."));
    connection.onreconnected(() => {
        console.log("‚úÖ SignalR reconnect√© !");
        restoreUnreadNotifications();
    });
    connection.onclose(() => {
        console.error("‚ùå SignalR d√©connect√©, tentative de reconnexion...");
        setTimeout(startConnection, 5000);
    });

    // üì© Fonction d'envoi de message
    $("#sendButton").click(function () {
        var receiverId = $("#receiverId").val();
        var message = $("#messageText").val();

        if (!receiverId || !message.trim()) {
            console.warn("‚ö†Ô∏è Impossible d'envoyer : receiverId ou message est vide.");
            return;
        }

        connection.invoke("SendMessageToReceiver", parseInt(receiverId), message)
            .then(() => {
                console.log("‚úÖ Message envoy√© via SignalR.");
                var messageDate = new Date();
                var dateDisplay = formatDate(messageDate);
                let messageStatus = "‚úì Envoy√©"; // Statut initial avant lecture

                $("#messageText").val(""); // Effacer le champ texte apr√®s l'envoi

                $("#chatWindow").append(`
                    <div class="message-container sent">
                        <div class="message sent">
                            <p>${message}</p>
                            <span class="message-date">${dateDisplay}</span>
                            <span class="message-status">${messageStatus}</span>
                        </div>
                        <div class="avatar"><i class="bi bi-person-circle user-icon"></i></div>
                    </div>
                `);

                scrollToBottom();
            })
            .catch(err => console.error("‚ùå Erreur d'envoi de message via SignalR :", err));
    });


    // üì¨ Notification de nouveau message
    connection.on("NotifyNewMessage", function (senderId) {
        console.log("üì¨ Nouveau message de :", senderId);

        var currentReceiverId = $("#receiverId").val();
        if (parseInt(currentReceiverId) !== senderId) {
            console.log("‚ö†Ô∏è Affichage d'une notification");

            var notifBadge = $("#notif-" + senderId);
            if (notifBadge.length > 0) {
                var currentCount = parseInt(notifBadge.text()) || 0;
                notifBadge.text(currentCount + 1).removeClass("d-none");
                saveUnreadNotification(senderId, currentCount + 1);
            } else {
                console.warn("‚ö†Ô∏è Badge non trouv√© pour l'utilisateur " + senderId);
            }
        }
    });

    // üì© R√©ception d'un message
    connection.on("ReceiveMessage", function (senderId, message) {
        console.log("üì© Message re√ßu de :", senderId);

        var currentReceiverId = $("#receiverId").val();
        var messageDate = new Date();
        var dateDisplay = formatDate(messageDate);
        let messageStatus = "‚úì‚úì"; // Statut initial avant lecture


        if (parseInt(currentReceiverId) === senderId) {
            console.log("‚úÖ Affichage du message en temps r√©el");

            $("#chatWindow").append(`
                <div class="message-container received">
                    <div class="avatar"><i class="bi bi-person-circle user-icon"></i></div>
                    <div class="message received">
                        <p>${message}</p>
                        <span class="message-date">${dateDisplay}</span>
                        <span class="message-status">${messageStatus}</span>
                    </div>
                </div>
            `);
            scrollToBottom();

            // üî• Marquer comme lu d√®s r√©ception du message
            connection.invoke("MarkMessagesAsRead", parseInt(senderId), parseInt(userId))
                .then(() => console.log("‚úÖ Messages marqu√©s comme lus pour", senderId))
                .catch(err => console.error("‚ùå Erreur lors du marquage comme lu :", err));
        } else {
            console.warn("‚ö†Ô∏è Message re√ßu mais la conversation n'est pas ouverte !");

            var notifBadge = $("#notif-" + senderId);
            if (notifBadge.length > 0) {
                var currentCount = parseInt(notifBadge.text()) || 0;
                notifBadge.text(currentCount + 1).removeClass("d-none");
                saveUnreadNotification(senderId, currentCount + 1);
            } else {
                console.warn("‚ö†Ô∏è Badge non trouv√© pour l'utilisateur " + senderId);
            }
        }
    });




    // üì© Mettre √† jour les ‚úì‚úì Vu pour l'exp√©diteur
    connection.on("MessageRead", function (receiverId) {
        console.log("‚úÖ Messages marqu√©s comme lus par :", receiverId);
        $(".message-row.sent .message-status").text("‚úì‚úì Vu");
    });

    // üî• Sauvegarde des notifications non lues
    function saveUnreadNotification(userId, count) {
        var unreadNotifications = JSON.parse(localStorage.getItem("unreadNotifications")) || {};
        unreadNotifications[userId] = count;
        localStorage.setItem("unreadNotifications", JSON.stringify(unreadNotifications));
    }

    // üîÑ Restauration des notifications non lues apr√®s rechargement
    function restoreUnreadNotifications() {
        var unreadNotifications = JSON.parse(localStorage.getItem("unreadNotifications")) || {};
        for (var userId in unreadNotifications) {
            var notifBadge = $("#notif-" + userId);
            if (notifBadge.length > 0) {
                notifBadge.text(unreadNotifications[userId]).removeClass("d-none");
            }
        }
    }

    // üéØ S√©lection d'un utilisateur
    function selectUser(receiverId, receiverName) {
    console.log("üîÑ Ouverture de la conversation avec :", receiverId);

    $("#receiverId").val(receiverId);
    $("#chatTitle").text("Chat avec " + receiverName);
    $("#chatWindow").empty();

    var notifBadge = $("#notif-" + receiverId);
    if (notifBadge.length > 0 && !notifBadge.hasClass("d-none")) {
        notifBadge.text("0").addClass("d-none");
        saveUnreadNotification(receiverId, 0);
    }

    connection.invoke("MarkMessagesAsRead", parseInt(receiverId), parseInt(userId))
        .then(() => console.log("‚úÖ Messages marqu√©s comme lus pour", receiverId))
        .catch(err => console.error("‚ùå Erreur lors du marquage comme lu :", err));

    // Charger les anciens messages via AJAX
    $.ajax({
        url: "/Message/GetMessages",
        type: "GET",
        data: { receiverId: receiverId },
        success: function (messages) {
            messages.forEach(msg => {
                let isSent = msg.senderId === parseInt(userId);
                let messageClass = isSent ? "sent" : "received";
                let messageDate = new Date(msg.dateEnvoi);
                let dateDisplay = formatDate(messageDate);
                let messageStatus = msg.isSeen ? "‚úì‚úì Vu" : "‚úì‚úì";

                $("#chatWindow").append(`
                    <div class="message-container ${messageClass}">
                        ${isSent ? "" : `<div class="avatar"><i class="bi bi-person-circle user-icon"></i></div>`}
                        <div class="message ${messageClass}">
                            <p>${msg.messageText}</p>
                            <span class="message-date">${dateDisplay}</span>
                            <span class="message-status">${messageStatus}</span>
                        </div>
                        ${isSent ? `<div class="avatar"><i class="bi bi-person-circle user-icon"></i></div>` : ""}
                    </div>
                `);
            });

            scrollToBottom();
        },
        error: function (err) {
            console.error("‚ùå Erreur chargement messages :", err);
        }
    });
}
    function scrollToBottom() {
        $("#chatWindow").scrollTop($("#chatWindow").prop("scrollHeight"));
    }

    function formatDate(date) {
        return date.toLocaleTimeString("fr-FR", { hour: "2-digit", minute: "2-digit" });
    }
</script>



</body>

</html>
