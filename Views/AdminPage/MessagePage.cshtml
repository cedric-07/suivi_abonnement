@model suivi_abonnement.Models.MessageViewModel

@{
    ViewData["Title"] = "Liste des Abonnements";
    Layout = "~/Views/Shared/Index.cshtml";
}

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bo√Æte de Messages</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-color: #f0f2f5;
            font-family: Roboto, Helvetica, Arial, sans-serif;
        }
        .chat-container {
            height: 85vh;
            display: flex;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0px 4px 10px rgba(0,0,0,0.1);
        }
        .chat-list {
            width: 30%;
            background: white;
        }
        .chat-box {
            width: 70%;
            display: flex;
            flex-direction: column;
            background: #e5ddd5;
        }
        .chat-header {
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: darkblue;

        }
        .message-list {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            color: darkblue;
        }
        .message-input {
            padding: 10px;
            background: white;
            border-top: 1px solid #ddd;
        }
        .message {
            padding: 10px 15px;
            border-radius: 18px;
            word-wrap: break-word;
        }
        .sent {
            background: #24a74f;
            color: rgb(250, 250, 250);
            margin-left:auto;
            margin-right: 0;
        }
        .received {
            background: #e5e5ea;
            color: black;
        }
        .message-date {
            font-size: 12px;
            text-align: right;
            margin-top: 5px;
            color: #666;
        }
        .list-group-item {
            cursor: pointer;
            border: none;
        }
        .message-row {
            align-items: center;
            margin-bottom: 10px;
            height: auto;
            width: 30%;
            border-radius: 15px;
        }
        
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="chat-container">
            <div class="chat-list p-3">
                <h5 class="mb-3">Conversations</h5>
                <form class="mb-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-search"></i></span>
                        <input type="text" class="form-control" placeholder="Rechercher...">
                    </div>
                </form>
                <ul class="list-group" id="userList">
                    @foreach (var user in Model?.Users)
                    {
                        <li class="list-group-item d-flex align-items-center" onclick="selectUser(@user.Id, '@user.Username')">
                            <div class="me-3">
                                <i class="fas fa-user-circle fa-2x"></i>
                            </div>
                            <span>@user.Username</span>
                            <span class="user-status @(user.IsConnected ? "online" : "offline")"></span>
                            <span class="badge bg-danger ms-auto d-none">0</span>
                        </li>
                    }
                </ul>
            </div>
            <div class="chat-box">
                <div class="chat-header">
                    <h5 id="chatTitle">S√©lectionnez un utilisateur</h5>
                </div>
                <div id="chatWindow" class="message-list">
                    @foreach (var message in Model.Messages)
                    {
                        if (message.SenderId == Model.CurrentUserId)
                        {
                            <div class="message-row sent">
                                <div class="avatar-sender">
                                    <i class="fas fa-user-circle user-icon"></i>
                                </div>
                                <div class="sent">
                                    <p>@message.MessageText</p>
                                    <span class="message-date">@message.DateEnvoi</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="message-row received">
                                <div class="avatar-receiver">
                                    <i class="fas fa-user-circle user-icon"></i>
                                </div>
                                <div class="message received">
                                    <p>@message.MessageText</p>
                                    <span class="message-date">@message.DateEnvoi</span>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="message-input d-flex">
                    <input type="hidden" id="receiverId" value="@Model.ReceiverId">
                    <textarea  id="messageText" class="form-control me-2" placeholder="√âcrivez un message..."></textarea>
                    <button id="sendButton" class="btn btn-primary"><i class="fas fa-paper-plane"></i></button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.20/signalr.min.js"></script>
    <script>
        var userId = '@(Context.Session.GetInt32("UserId"))';
        var connection = new signalR.HubConnectionBuilder().withUrl("/messageHub").build();

        connection.start().then(() => {
            console.log("SignalR connect√© !");
        }).catch(err => {
            console.error(err.toString());
        });

        // Fonction pour envoyer un message
        $("#sendButton").click(function () {
            var receiverId = $("#receiverId").val();
            var message = $("#messageText").val();

            if (!receiverId || !message) {
                console.warn("‚ö†Ô∏è Impossible d'envoyer : receiverId ou message est vide.");
                return;
            }

            try {
                connection.invoke("SendMessageToReceiver", parseInt(receiverId), message)
                    .then(() => {
                        console.log("‚úÖ Message envoy√© avec succ√®s via SignalR.");

                        var messageDate = new Date();
                        var now = new Date();
                        var dateDisplay = formatDate(messageDate, now);

                        $("#messageText").val(""); // Vider l'input apr√®s l'envoi

                        // Ajouter le message envoy√© en bas du chat
                        $("#chatWindow").append(`
                            <div class="message-row sent">
                                <div class="avatar-sender">
                                    <i class="fas fa-user-circle user-icon"></i>
                                </div>
                                <div class="message sent">
                                    <p>${message}</p>
                                    <span class="message-date">${dateDisplay}</span>
                                </div>
                            </div>
                        `);

                        scrollToBottom();
                    })
                    .catch(err => {
                        console.error("‚ùå Erreur lors de l'envoi du message via SignalR :", err);
                    });
            } catch (error) {
                console.error("üö® Erreur d'ex√©cution dans `SendMessage` :", error);
            }
        });

        // Fonction pour recevoir un message
        connection.on("ReceiveMessage", function (senderId, message) {
            var isSentByCurrentUser = senderId === parseInt(userId);
            var messageClass = isSentByCurrentUser ? "sent" : "received";
            var avatarClass = isSentByCurrentUser ? "avatar-sender" : "avatar-receiver";

            var messageDate = new Date();
            var now = new Date();
            var dateDisplay = formatDate(messageDate, now);

            // Ajouter le message re√ßu en bas du chat
            $("#chatWindow").append(`
                <div class="message-row ${messageClass}">
                    <div class="${avatarClass}">
                        <i class="fas fa-user-circle user-icon"></i>
                    </div>
                    <div class="message ${messageClass}">
                        <p>${message}</p>
                        <span class="message-date">${dateDisplay}</span>
                    </div>
                </div>
            `);

            scrollToBottom();
        });

        // Fonction pour scroller en bas du chat automatiquement
        function scrollToBottom() {
            var chatWindow = $("#chatWindow");
            chatWindow.scrollTop(chatWindow.prop("scrollHeight"));
        }

        // Fonction pour formater la date
        function formatDate(messageDate, now) {
            if (
                messageDate.getDate() === now.getDate() &&
                messageDate.getMonth() === now.getMonth() &&
                messageDate.getFullYear() === now.getFullYear()
            ) {
                return "Aujourd'hui √† " + messageDate.toLocaleTimeString("fr-FR", { hour: "2-digit", minute: "2-digit" });
            } else {
                return messageDate.toLocaleDateString("fr-FR", { weekday: "long" }) + 
                    " √† " + 
                    messageDate.toLocaleTimeString("fr-FR", { hour: "2-digit", minute: "2-digit" });
            }
        }

        // Charger les messages dans le bon ordre
        function selectUser(receiverId, receiverName) {
            $("#receiverId").val(receiverId);
            $("#chatTitle").text("Chat avec " + receiverName);
            $("#chatWindow").empty();

            // R√©initialiser le badge de notification
            $("#notif-" + receiverId).text("0").addClass("d-none");

            // Charger les anciens messages
            $.ajax({
                url: "/Message/GetMessages",
                type: "GET",
                data: { receiverId: receiverId },
                success: function (messages) {
                    messages.forEach(msg => {
                        let messageClass = msg.senderId === parseInt(userId) ? "sent" : "received";
                        let messagedate = new Date(msg.dateEnvoi);
                        let now = new Date();
                        let dateDisplay = formatDate(messagedate, now);

                        // Ajouter les messages dans l'ordre naturel
                        $("#chatWindow").append(`
                            <div class="message-row ${messageClass}">
                                <div class="message ${messageClass}">
                                    <i class="bi bi-person-circle user-icon"></i>
                                    <div class="message-content">
                                        <p>${msg.messageText}</p>
                                        <span class="message-date">${dateDisplay}</span>
                                    </div>
                                </div>
                            </div>
                        `);
                    });

                    scrollToBottom(); // Assurer que la conversation s'affiche en bas au chargement
                },
                error: function (err) {
                    console.error("‚ùå Erreur lors du chargement des messages :", err);
                }
            });
        }


</script>
</body>

</html>
